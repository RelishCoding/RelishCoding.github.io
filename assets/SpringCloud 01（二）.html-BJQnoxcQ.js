import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,d as n,b as l,o as t}from"./app-D2bV2LwX.js";const p={};function r(h,i){return t(),a("div",null,[i[0]||(i[0]=e("p",null,"Ribbon 负载均衡、Nacos 注册中心",-1)),n(" more "),i[1]||(i[1]=l(`<h1 id="四、ribbon负载均衡" tabindex="-1"><a class="header-anchor" href="#四、ribbon负载均衡"><span>四、Ribbon负载均衡</span></a></h1><p>上一节中，我们添加了 @LoadBalanced 注解，即可实现负载均衡功能，这是什么原理呢？</p><h2 id="_1、负载均衡原理" tabindex="-1"><a class="header-anchor" href="#_1、负载均衡原理"><span>1、负载均衡原理</span></a></h2><p>SpringCloud 底层其实是利用了一个名为 Ribbon 的组件，来实现负载均衡功能的。</p><p>负载均衡流程：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image38.png" alt="image38" tabindex="0" loading="lazy"><figcaption>image38</figcaption></figure><p>那么我们发出的请求明明是 http://userservice/user/1 ，怎么变成了 http://localhost:8081 的呢？</p><h2 id="_2、源码跟踪" tabindex="-1"><a class="header-anchor" href="#_2、源码跟踪"><span>2、源码跟踪</span></a></h2><p>为什么我们只输入了 service 名称就可以访问了呢？之前还要获取 ip 和端口。</p><p>显然有人帮我们根据 service 名称，获取到了服务实例的 ip 和端口。它就是 <code>LoadBalancerInterceptor</code>，这个类会对 RestTemplate 的请求进行拦截，然后从 Eureka 根据服务 id 获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务 id。</p><p>我们进行源码跟踪：</p><h3 id="_2-1、loadbalancerintercepor" tabindex="-1"><a class="header-anchor" href="#_2-1、loadbalancerintercepor"><span>2.1、LoadBalancerIntercepor</span></a></h3><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image39.png" alt="image39" tabindex="0" loading="lazy"><figcaption>image39</figcaption></figure><p>可以看到这里的 intercept 方法，拦截了用户的 HttpRequest 请求，然后做了几件事：</p><ul><li><code>request.getURI()</code>：获取请求 URI，本例中就是 http://user-service/user/8</li><li><code>originalUri.getHost()</code>：获取 URI 路径的主机名，其实就是服务 id，即<code>user-service</code></li><li><code>this.loadBalancer.execute()</code>：处理服务 id，和用户请求。</li></ul><p>这里的 <code>this.loadBalancer</code> 是 <code>LoadBalancerClient</code> 类型，我们继续跟入。</p><h3 id="_2-2、loadbalancerclient" tabindex="-1"><a class="header-anchor" href="#_2-2、loadbalancerclient"><span>2.2、LoadBalancerClient</span></a></h3><p>继续跟入 execute 方法：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image40.png" alt="image40" tabindex="0" loading="lazy"><figcaption>image40</figcaption></figure><p>代码是这样的：</p><ul><li><code>getLoadBalancer(serviceId)</code>：根据服务 id 获取 ILoadBalancer，而 ILoadBalancer 会拿着服务 id 去 eureka 中获取服务列表并保存起来。</li><li><code>getServer(loadBalancer)</code>：利用内置的负载均衡算法，从服务列表中选择一个。本例中，可以看到获取了 8082 端口的服务</li></ul><p>放行后，再次访问并跟踪，发现获取的是 8081：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image41.png" alt="image41" tabindex="0" loading="lazy"><figcaption>image41</figcaption></figure><p>果然实现了负载均衡。</p><h3 id="_2-3、负载均衡策略-irule" tabindex="-1"><a class="header-anchor" href="#_2-3、负载均衡策略-irule"><span>2.3、负载均衡策略 IRule</span></a></h3><p>在刚才的代码中，可以看到获取服务是通过一个 <code>getServer</code> 方法来做负载均衡：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image41.png" alt="image41" tabindex="0" loading="lazy"><figcaption>image41</figcaption></figure><p>我们继续跟入：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image42.png" alt="image42" tabindex="0" loading="lazy"><figcaption>image42</figcaption></figure><p>继续跟踪源码 chooseServer 方法，发现这么一段代码：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image43.png" alt="image43" tabindex="0" loading="lazy"><figcaption>image43</figcaption></figure><p>我们看看这个 rule 是谁：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image44.png" alt="image44" tabindex="0" loading="lazy"><figcaption>image44</figcaption></figure><p>这里的 rule 默认值是一个 <code>RoundRobinRule</code>，看类的介绍：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image45.png" alt="image45" tabindex="0" loading="lazy"><figcaption>image45</figcaption></figure><p>这不就是轮询的意思嘛。</p><p>到这里，整个负载均衡的流程我们就清楚了。</p><h3 id="_2-4、总结" tabindex="-1"><a class="header-anchor" href="#_2-4、总结"><span>2.4、总结</span></a></h3><p>SpringCloudRibbon 的底层采用了一个拦截器，拦截了 RestTemplate 发出的请求，对地址做了修改。用一幅图来总结一下：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image46.png" alt="image46" tabindex="0" loading="lazy"><figcaption>image46</figcaption></figure><p>基本流程如下：</p><ul><li>拦截 RestTemplate 请求 http://userservice/user/1</li><li>RibbonLoadBalancerClient 会从请求 url 中获取服务名称，也就是 user-service</li><li>DynamicServerListLoadBalancer 根据 user-service 到 eureka 拉取服务列表</li><li>eureka 返回列表，localhost:8081、localhost:8082</li><li>IRule 利用内置负载均衡规则，从列表中选择一个，例如 localhost:8081</li><li>RibbonLoadBalancerClient 修改请求地址，用 localhost:8081 替代 userservice，得到 http://localhost:8081/user/1 ，发起真实请求</li></ul><h2 id="_3、负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_3、负载均衡策略"><span>3、负载均衡策略</span></a></h2><h3 id="_3-1、负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_3-1、负载均衡策略"><span>3.1、负载均衡策略</span></a></h3><p>负载均衡的规则都定义在 IRule 接口中，而 IRule 有很多不同的实现类：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image47.png" alt="image47" tabindex="0" loading="lazy"><figcaption>image47</figcaption></figure><p>不同规则的含义如下：</p><table><thead><tr><th><strong>内置负载均衡规则类</strong></th><th><strong>规则描述</strong></th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>简单轮询服务列表来选择服务器。它是 Ribbon 默认的负载均衡规则。</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略：<br>（1）在默认情况下，这台服务器如果 3 次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续 30 秒，如果再次连接失败，短路的持续时间就会几何级地增加。<br>（2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了 AvailabilityFilteringRule 规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的 &lt;clientName&gt;.&lt;clientConfigNameSpace&gt;.ActiveConnectionsLimit 属性进行配置。</td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td></tr><tr><td><strong>ZoneAvoidanceRule</strong></td><td>以区域可用的服务器为基础进行服务器的选择。使用 Zone 对服务器进行分类，这个 Zone 可以理解为一个机房、一个机架等。而后再对 Zone 内的多个服务做轮询。</td></tr><tr><td>BestAvailableRule</td><td>忽略那些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器。</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑</td></tr></tbody></table><p>默认的实现就是 ZoneAvoidanceRule，是一种轮询方案</p><h3 id="_3-2、自定义负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_3-2、自定义负载均衡策略"><span>3.2、自定义负载均衡策略</span></a></h3><p>通过定义 IRule 实现可以修改负载均衡规则，有两种方式：</p><p>1、代码方式：在 order-service 中的 OrderApplication 类中，定义一个新的 IRule：</p><ul><li>作用范围为全体，即 orderservice 访问任何微服务都会按修改后的规则</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> IRule</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> randomRule</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RandomRule</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、配置文件方式：在 order-service 的 application.yml 文件中，添加新的配置也可以修改规则：</p><ul><li>只针对某个服务而言</li></ul><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">userservice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 给某个微服务配置负载均衡规则，这里是userservice服务</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  ribbon</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    NFLoadBalancerRuleClassName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">com.netflix.loadbalancer.RandomRule</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 负载均衡规则</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong>，一般用默认的负载均衡规则，不做修改。</p></blockquote><h2 id="_4、饥饿加载" tabindex="-1"><a class="header-anchor" href="#_4、饥饿加载"><span>4、饥饿加载</span></a></h2><p>Ribbon 默认是采用懒加载，即第一次访问时才会去创建 LoadBalanceClient，请求时间会很长。</p><p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，在 order-service 的 application.yml 文件通过下面配置开启饥饿加载：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">ribbon</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  eager-load</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    enabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 开启饥饿加载</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    clients</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">userservice</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 指定饥饿加载的服务名称</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、总结" tabindex="-1"><a class="header-anchor" href="#_5、总结"><span>5、总结</span></a></h2><ol><li><p>Ribbon负载均衡规则</p><ul><li>规则接口是 IRule</li><li>默认实现是 ZoneAvoidanceRule，根据 zone 选择服务列表，然后轮询</li></ul></li><li><p>负载均衡自定义方式</p><ul><li>代码方式：配置灵活，但修改时需要重新打包发布</li><li>配置方式：直观，方便，无需重新打包发布，但是无法做全局配置</li></ul></li><li><p>饥饿加载</p><ul><li>开启饥饿加载</li><li>指定饥饿加载的微服务名称</li></ul></li></ol><h1 id="五、nacos注册中心" tabindex="-1"><a class="header-anchor" href="#五、nacos注册中心"><span>五、Nacos注册中心</span></a></h1><p>国内公司一般都推崇阿里巴巴的技术，比如注册中心，SpringCloudAlibaba 也推出了一个名为 Nacos 的注册中心。</p><h2 id="_1、认识和安装nacos" tabindex="-1"><a class="header-anchor" href="#_1、认识和安装nacos"><span>1、认识和安装Nacos</span></a></h2><p><a href="https://nacos.io/" target="_blank" rel="noopener noreferrer">Nacos</a> 是阿里巴巴的产品，现在是 <a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener noreferrer">SpringCloud</a> 中的一个组件。相比 <a href="https://github.com/Netflix/eureka" target="_blank" rel="noopener noreferrer">Eureka</a> 功能更加丰富，在国内受欢迎程度较高。</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image48.png" alt="image48" tabindex="0" loading="lazy"><figcaption>image48</figcaption></figure><h3 id="_1-1、windows安装" tabindex="-1"><a class="header-anchor" href="#_1-1、windows安装"><span>1.1、Windows安装</span></a></h3><p>开发阶段采用单机安装即可。</p><h4 id="下载安装包" tabindex="-1"><a class="header-anchor" href="#下载安装包"><span>下载安装包</span></a></h4><p>在 Nacos 的 GitHub 页面，提供有下载链接，可以下载编译好的 Nacos 服务端或者源代码：</p><p>GitHub主页：<a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener noreferrer">https://github.com/alibaba/nacos</a></p><p>GitHub 的 Release 下载页：<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener noreferrer">https://github.com/alibaba/nacos/releases</a></p><p>如图：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image49.png" alt="image49" tabindex="0" loading="lazy"><figcaption>image49</figcaption></figure><h4 id="解压" tabindex="-1"><a class="header-anchor" href="#解压"><span>解压</span></a></h4><p>将这个包解压到任意非中文目录下，如图：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image50.png" alt="image50" tabindex="0" loading="lazy"><figcaption>image50</figcaption></figure><p>目录说明：</p><ul><li>bin：启动脚本</li><li>conf：配置文件</li></ul><h4 id="端口配置" tabindex="-1"><a class="header-anchor" href="#端口配置"><span>端口配置</span></a></h4><p>Nacos 的默认端口是 8848，如果你电脑上的其它进程占用了 8848 端口，请先尝试关闭该进程。</p><p>如果无法关闭占用 8848 端口的进程，也可以进入 nacos 的 conf 目录，修改配置文件中的端口：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image51.png" alt="image51" tabindex="0" loading="lazy"><figcaption>image51</figcaption></figure><p>修改其中的内容：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image52.png" alt="image52" tabindex="0" loading="lazy"><figcaption>image52</figcaption></figure><h4 id="启动" tabindex="-1"><a class="header-anchor" href="#启动"><span>启动</span></a></h4><p>启动非常简单，进入 bin 目录，结构如下：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image53.png" alt="image53" tabindex="0" loading="lazy"><figcaption>image53</figcaption></figure><p>然后执行命令即可：</p><ul><li><p>windows 命令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>startup.cmd -m standalone</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p>执行后的效果如图：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image54.png" alt="image54" tabindex="0" loading="lazy"><figcaption>image54</figcaption></figure><h4 id="访问" tabindex="-1"><a class="header-anchor" href="#访问"><span>访问</span></a></h4><p>在浏览器输入地址：http://127.0.0.1:8848/nacos 即可：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image55.png" alt="image55" tabindex="0" loading="lazy"><figcaption>image55</figcaption></figure><p>默认的账号和密码都是 nacos，进入后：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image56.png" alt="image56" tabindex="0" loading="lazy"><figcaption>image56</figcaption></figure><h3 id="_1-2、linux安装" tabindex="-1"><a class="header-anchor" href="#_1-2、linux安装"><span>1.2、Linux安装</span></a></h3><p>Linux 或者 Mac 安装方式与 Windows 类似。</p><h4 id="安装jdk" tabindex="-1"><a class="header-anchor" href="#安装jdk"><span>安装JDK</span></a></h4><p>Nacos 依赖于 JDK 运行，所以 Linux 上也需要安装 JDK 才行。</p><p>上传 jdk 安装包到某个目录，例如：<code>/usr/local/</code></p><p>然后解压缩：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -xvf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jdk-8u144-linux-x64.tar.gz</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后重命名为 java</p><p>配置环境变量：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> JAVA_HOME</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">usr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">local</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">java</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> PATH</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$PATH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$JAVA_HOME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>设置环境变量：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">source</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/profile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="上传安装包" tabindex="-1"><a class="header-anchor" href="#上传安装包"><span>上传安装包</span></a></h4><p>如图：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image49.png" alt="image49" tabindex="0" loading="lazy"><figcaption>image49</figcaption></figure><p>将 tar.gz 上传到 Linux 服务器的某个目录，例如 <code>/usr/local/src</code> 目录下：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image57.png" alt="image57" tabindex="0" loading="lazy"><figcaption>image57</figcaption></figure><h4 id="解压-1" tabindex="-1"><a class="header-anchor" href="#解压-1"><span>解压</span></a></h4><p>命令解压缩安装包：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -xvf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nacos-server-1.4.1.tar.gz</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后删除安装包：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -rf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nacos-server-1.4.1.tar.gz</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>目录中最终样式：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image58.png" alt="image58" tabindex="0" loading="lazy"><figcaption>image58</figcaption></figure><p>目录内部：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image59.png" alt="image59" tabindex="0" loading="lazy"><figcaption>image59</figcaption></figure><h4 id="端口配置-1" tabindex="-1"><a class="header-anchor" href="#端口配置-1"><span>端口配置</span></a></h4><p>与 windows 中类似</p><h4 id="启动-1" tabindex="-1"><a class="header-anchor" href="#启动-1"><span>启动</span></a></h4><p>在 nacos/bin 目录中，输入命令启动 Nacos：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sh</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> startup.sh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> standalone</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_1-3、nacos的依赖" tabindex="-1"><a class="header-anchor" href="#_1-3、nacos的依赖"><span>1.3、Nacos的依赖</span></a></h3><p>父工程：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!--Nacos的管理依赖--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;com.alibaba.cloud&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-cloud-alibaba-dependencies&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;2.2.5.RELEASE&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;pom&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;import&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- nacos客户端依赖包 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;com.alibaba.cloud&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、服务注册到nacos" tabindex="-1"><a class="header-anchor" href="#_2、服务注册到nacos"><span>2、服务注册到nacos</span></a></h2><p>Nacos 是 SpringCloudAlibaba 的组件，而 SpringCloudAlibaba 也遵循 SpringCloud 中定义的服务注册、服务发现规范。因此使用 Nacos 和使用 Eureka 对于微服务来说，并没有太大区别。</p><p>主要差异在于：</p><ul><li>依赖不同</li><li>服务地址不同</li></ul><h3 id="_2-1、引入依赖" tabindex="-1"><a class="header-anchor" href="#_2-1、引入依赖"><span>2.1、引入依赖</span></a></h3><p>在 cloud-demo 父工程的 pom 文件中的 <code>&lt;dependencyManagement&gt;</code> 中引入 SpringCloudAlibaba 的依赖：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!--Nacos的管理依赖--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;com.alibaba.cloud&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-cloud-alibaba-dependencies&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;2.2.6.RELEASE&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;pom&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;import&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 user-service 和 order-service 中的 pom 文件中引入 nacos-discovery 依赖：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- nacos客户端依赖包 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;com.alibaba.cloud&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong>：不要忘了注释掉 eureka 的依赖。</p></blockquote><h3 id="_2-2、配置-nacos-地址" tabindex="-1"><a class="header-anchor" href="#_2-2、配置-nacos-地址"><span>2.2、配置 nacos 地址</span></a></h3><p>在 user-service 和 order-service 的 application.yml 中添加 nacos 地址：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  cloud</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    nacos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      server-addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">localhost:8848</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong>：不要忘了注释掉 eureka 的地址</p></blockquote><h3 id="_2-3、重启" tabindex="-1"><a class="header-anchor" href="#_2-3、重启"><span>2.3、重启</span></a></h3><p>重启微服务后，登录 nacos 管理页面，可以看到微服务信息：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image60.png" alt="image60" tabindex="0" loading="lazy"><figcaption>image60</figcaption></figure><h2 id="_3、服务分级存储模型" tabindex="-1"><a class="header-anchor" href="#_3、服务分级存储模型"><span>3、服务分级存储模型</span></a></h2><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的 user-service，可以有:</p><ul><li>127.0.0.1:8081</li><li>127.0.0.1:8082</li><li>127.0.0.1:8083</li></ul><p>假如这些实例分布于全国各地的不同机房，例如：</p><ul><li>127.0.0.1:8081，在上海机房</li><li>127.0.0.1:8082，在上海机房</li><li>127.0.0.1:8083，在杭州机房</li></ul><p>Nacos 就将同一机房内的实例划分为一个<strong>集群</strong>。</p><p>也就是说，user-service 是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image61.png" alt="image61" tabindex="0" loading="lazy"><figcaption>image61</figcaption></figure><p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image62.png" alt="image62" tabindex="0" loading="lazy"><figcaption>image62</figcaption></figure><p>杭州机房内的 order-service 应该优先访问同机房的 user-service。</p><h3 id="_3-1、给user-service配置集群" tabindex="-1"><a class="header-anchor" href="#_3-1、给user-service配置集群"><span>3.1、给user-service配置集群</span></a></h3><p>修改 user-service 的 application.yml 文件，添加集群配置：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  cloud</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    nacos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      server-addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">localhost:8848</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      discovery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        cluster-name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">HZ</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 配置集群名称，也就是机房位置，例如：HZ杭州</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启两个 user-service 实例后，我们可以在 nacos 控制台看到下面结果：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image63.png" alt="image63" tabindex="0" loading="lazy"><figcaption>image63</figcaption></figure><p>我们再次复制一个 user-service 启动配置，添加属性：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-Dserver.port</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=8083</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Dspring.cloud.nacos.discovery.cluster-name=SH</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>配置如图所示：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image64.png" alt="image64" tabindex="0" loading="lazy"><figcaption>image64</figcaption></figure><p>启动 UserApplication3 后再次查看 nacos 控制台：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image65.png" alt="image65" tabindex="0" loading="lazy"><figcaption>image65</figcaption></figure><blockquote><p>总结：</p><ol><li><p>Nacos服务分级存储模型</p><ul><li>一级是服务，例如 userservice</li><li>二级是集群，例如杭州或上海</li><li>三级是实例，例如杭州机房的某台部署了 userservice 的服务器</li></ul></li><li><p>如何设置实例的集群属性</p><ul><li>修改 application.yml 文件，添加 spring.cloud.nacos.discovery.cluster-name 属性即可</li></ul></li></ol></blockquote><h3 id="_3-2、同集群优先的负载均衡" tabindex="-1"><a class="header-anchor" href="#_3-2、同集群优先的负载均衡"><span>3.2、同集群优先的负载均衡</span></a></h3><p>默认的 <code>ZoneAvoidanceRule</code> 并不能实现根据同集群优先来实现负载均衡。</p><p>因此 Nacos 中提供了一个 <code>NacosRule</code> 的实现，可以优先从同集群中挑选实例。</p><ol><li>给 order-service 配置集群信息</li></ol><p>修改 order-service 的 application.yml 文件，添加集群配置：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">spring:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  cloud:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    nacos:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      server-addr:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> localhost:8848</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      discovery:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        cluster-name:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> HZ</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 集群名称</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>修改负载均衡规则</li></ol><p>修改 order-service 的 application.yml 文件，修改负载均衡规则：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">userservice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  ribbon</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    NFLoadBalancerRuleClassName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">com.alibaba.cloud.nacos.ribbon.NacosRule</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 负载均衡规则</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>总结：NacosRule 负载均衡策略</p><ul><li><p>优先选择同集群服务实例列表</p></li><li><p>本地集群找不到提供者，才去其它集群寻找，并且会报警告</p></li><li><p>确定了可用实例列表后，再采用随机负载均衡挑选实例</p></li></ul></blockquote><h2 id="_4、权重配置" tabindex="-1"><a class="header-anchor" href="#_4、权重配置"><span>4、权重配置</span></a></h2><p>实际部署中会出现这样的场景：</p><p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。</p><p>但默认情况下 NacosRule 是同集群内随机挑选，不会考虑机器的性能问题。</p><p>因此，Nacos 提供了权重配置来控制访问频率，权重越大则访问频率越高。</p><p>在 nacos 控制台，找到 user-service 的实例列表，点击编辑，即可修改权重：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image66.png" alt="image66" tabindex="0" loading="lazy"><figcaption>image66</figcaption></figure><p>在弹出的编辑窗口，修改权重，将权重设置为 0.1，测试可以发现 8081 被访问到的频率大大降低</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image67.png" alt="image67" tabindex="0" loading="lazy"><figcaption>image67</figcaption></figure><blockquote><p><strong>注意</strong>：</p><ul><li><p>Nacos 控制台可以设置实例的权重值，0~1之间</p></li><li><p>同集群内的多个实例，权重越高被访问的频率越高</p></li><li><p>如果权重修改为0，则该实例永远不会被访问</p></li></ul></blockquote><h2 id="_5、环境隔离" tabindex="-1"><a class="header-anchor" href="#_5、环境隔离"><span>5、环境隔离</span></a></h2><p>Nacos 提供了 namespace 来实现环境隔离功能，比如基于开发测试生产环境不同做隔离。</p><ul><li>nacos 中可以有多个 namespace</li><li>namespace 下可以有 group、service 等</li><li>不同 namespace 之间相互隔离，例如不同 namespace 的服务互相不可见</li></ul><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image68.png" alt="image68" tabindex="0" loading="lazy"><figcaption>image68</figcaption></figure><h3 id="_5-1、创建-namespace" tabindex="-1"><a class="header-anchor" href="#_5-1、创建-namespace"><span>5.1、创建 namespace</span></a></h3><p>默认情况下，所有 service、data、group 都在同一个 namespace，名为 public：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image69.png" alt="image69" tabindex="0" loading="lazy"><figcaption>image69</figcaption></figure><p>我们可以点击页面新增按钮，添加一个namespace：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image70.png" alt="image70" tabindex="0" loading="lazy"><figcaption>image70</figcaption></figure><p>然后，填写表单：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image71.png" alt="image71" tabindex="0" loading="lazy"><figcaption>image71</figcaption></figure><p>就能在页面看到一个新的 namespace：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image72.png" alt="image72" tabindex="0" loading="lazy"><figcaption>image72</figcaption></figure><h3 id="_5-2、给微服务配置-namespace" tabindex="-1"><a class="header-anchor" href="#_5-2、给微服务配置-namespace"><span>5.2、给微服务配置 namespace</span></a></h3><p>给微服务配置 namespace 只能通过修改配置来实现。</p><p>例如，修改 order-service 的 application.yml 文件：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  cloud</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    nacos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      server-addr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">localhost:8848</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      discovery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        cluster-name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">HZ</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">492a7d5d-237b-46a1-a99a-fa8e98e4b0f9</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 命名空间，填ID</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启 order-service 后，访问控制台，可以看到下面的结果：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image73.png" alt="image73" tabindex="0" loading="lazy"><figcaption>image73</figcaption></figure><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image74.png" alt="image74" tabindex="0" loading="lazy"><figcaption>image74</figcaption></figure><p>此时访问 order-service，因为 namespace 不同，会导致找不到 userservice，控制台会报错：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image75.png" alt="image75" tabindex="0" loading="lazy"><figcaption>image75</figcaption></figure><blockquote><p>总结：</p><ul><li>每个 namespace 都有唯一 id</li><li>服务设置 namespace 时要写 id 而不是名称</li><li>不同 namespace 下的服务互相不可见</li></ul></blockquote><h2 id="_6、nacos与eureka的区别" tabindex="-1"><a class="header-anchor" href="#_6、nacos与eureka的区别"><span>6、Nacos与Eureka的区别</span></a></h2><p>Nacos 的服务实例分为两种类型：</p><ul><li><p>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。</p></li><li><p>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</p></li></ul><p>配置一个服务实例为永久实例：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  cloud</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    nacos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      discovery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        ephemeral</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 设置为非临时实例</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nacos 和 Eureka 整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image76.png" alt="image76" tabindex="0" loading="lazy"><figcaption>image76</figcaption></figure><ul><li><p>Nacos 与 eureka 的共同点</p><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li><p>Nacos 与 Eureka 的区别</p><ul><li>Nacos 支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos 支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos 集群默认采用 AP 方式，当集群中存在非临时实例时，采用 CP 模式；Eureka 采用 AP 方式</li></ul></li></ul><blockquote><p>参考视频：<a href="https://www.bilibili.com/video/BV1LQ4y127n4/?p=14&amp;share_source=copy_web" target="_blank" rel="noopener noreferrer">SpringCloud+RabbitMQ+Docker+Redis+搜索+分布式，系统详解springcloud微服务技术栈课程|黑马程序员Java微服务</a></p></blockquote>`,228))])}const o=s(p,[["render",r],["__file","SpringCloud 01（二）.html.vue"]]),c=JSON.parse(`{"path":"/Java%E5%90%8E%E7%AB%AF/Microservice/SpringCloud%2001%EF%BC%88%E4%BA%8C%EF%BC%89.html","title":"SpringCloud 01（二）","lang":"zh-CN","frontmatter":{"title":"SpringCloud 01（二）","date":"2023-09-20T00:00:00.000Z","category":"Microservice","tag":["microservice"],"description":"Ribbon 负载均衡、Nacos 注册中心","head":[["meta",{"property":"og:url","content":"https://relishcoding.github.io/Java%E5%90%8E%E7%AB%AF/Microservice/SpringCloud%2001%EF%BC%88%E4%BA%8C%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"RelishCoding's Blog"}],["meta",{"property":"og:title","content":"SpringCloud 01（二）"}],["meta",{"property":"og:description","content":"Ribbon 负载均衡、Nacos 注册中心"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image38.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"microservice"}],["meta",{"property":"article:published_time","content":"2023-09-20T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringCloud 01（二）\\",\\"image\\":[\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image38.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image39.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image40.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image41.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image41.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image42.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image43.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image44.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image45.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image46.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image47.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image48.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image49.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image50.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image51.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image52.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image53.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image54.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image55.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image56.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image49.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image57.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image58.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image59.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image60.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image61.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image62.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image63.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image64.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image65.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image66.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image67.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image68.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image69.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image70.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image71.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image72.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image73.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image74.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image75.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image76.png\\"],\\"datePublished\\":\\"2023-09-20T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"RelishCoding\\",\\"url\\":\\"https://github.com/RelishCoding\\"}]}"]]},"headers":[{"level":1,"title":"四、Ribbon负载均衡","slug":"四、ribbon负载均衡","link":"#四、ribbon负载均衡","children":[{"level":2,"title":"1、负载均衡原理","slug":"_1、负载均衡原理","link":"#_1、负载均衡原理","children":[]},{"level":2,"title":"2、源码跟踪","slug":"_2、源码跟踪","link":"#_2、源码跟踪","children":[{"level":3,"title":"2.1、LoadBalancerIntercepor","slug":"_2-1、loadbalancerintercepor","link":"#_2-1、loadbalancerintercepor","children":[]},{"level":3,"title":"2.2、LoadBalancerClient","slug":"_2-2、loadbalancerclient","link":"#_2-2、loadbalancerclient","children":[]},{"level":3,"title":"2.3、负载均衡策略 IRule","slug":"_2-3、负载均衡策略-irule","link":"#_2-3、负载均衡策略-irule","children":[]},{"level":3,"title":"2.4、总结","slug":"_2-4、总结","link":"#_2-4、总结","children":[]}]},{"level":2,"title":"3、负载均衡策略","slug":"_3、负载均衡策略","link":"#_3、负载均衡策略","children":[{"level":3,"title":"3.1、负载均衡策略","slug":"_3-1、负载均衡策略","link":"#_3-1、负载均衡策略","children":[]},{"level":3,"title":"3.2、自定义负载均衡策略","slug":"_3-2、自定义负载均衡策略","link":"#_3-2、自定义负载均衡策略","children":[]}]},{"level":2,"title":"4、饥饿加载","slug":"_4、饥饿加载","link":"#_4、饥饿加载","children":[]},{"level":2,"title":"5、总结","slug":"_5、总结","link":"#_5、总结","children":[]}]},{"level":1,"title":"五、Nacos注册中心","slug":"五、nacos注册中心","link":"#五、nacos注册中心","children":[{"level":2,"title":"1、认识和安装Nacos","slug":"_1、认识和安装nacos","link":"#_1、认识和安装nacos","children":[{"level":3,"title":"1.1、Windows安装","slug":"_1-1、windows安装","link":"#_1-1、windows安装","children":[{"level":4,"title":"下载安装包","slug":"下载安装包","link":"#下载安装包","children":[]},{"level":4,"title":"解压","slug":"解压","link":"#解压","children":[]},{"level":4,"title":"端口配置","slug":"端口配置","link":"#端口配置","children":[]},{"level":4,"title":"启动","slug":"启动","link":"#启动","children":[]},{"level":4,"title":"访问","slug":"访问","link":"#访问","children":[]}]},{"level":3,"title":"1.2、Linux安装","slug":"_1-2、linux安装","link":"#_1-2、linux安装","children":[{"level":4,"title":"安装JDK","slug":"安装jdk","link":"#安装jdk","children":[]},{"level":4,"title":"上传安装包","slug":"上传安装包","link":"#上传安装包","children":[]},{"level":4,"title":"解压","slug":"解压-1","link":"#解压-1","children":[]},{"level":4,"title":"端口配置","slug":"端口配置-1","link":"#端口配置-1","children":[]},{"level":4,"title":"启动","slug":"启动-1","link":"#启动-1","children":[]}]},{"level":3,"title":"1.3、Nacos的依赖","slug":"_1-3、nacos的依赖","link":"#_1-3、nacos的依赖","children":[]}]},{"level":2,"title":"2、服务注册到nacos","slug":"_2、服务注册到nacos","link":"#_2、服务注册到nacos","children":[{"level":3,"title":"2.1、引入依赖","slug":"_2-1、引入依赖","link":"#_2-1、引入依赖","children":[]},{"level":3,"title":"2.2、配置 nacos 地址","slug":"_2-2、配置-nacos-地址","link":"#_2-2、配置-nacos-地址","children":[]},{"level":3,"title":"2.3、重启","slug":"_2-3、重启","link":"#_2-3、重启","children":[]}]},{"level":2,"title":"3、服务分级存储模型","slug":"_3、服务分级存储模型","link":"#_3、服务分级存储模型","children":[{"level":3,"title":"3.1、给user-service配置集群","slug":"_3-1、给user-service配置集群","link":"#_3-1、给user-service配置集群","children":[]},{"level":3,"title":"3.2、同集群优先的负载均衡","slug":"_3-2、同集群优先的负载均衡","link":"#_3-2、同集群优先的负载均衡","children":[]}]},{"level":2,"title":"4、权重配置","slug":"_4、权重配置","link":"#_4、权重配置","children":[]},{"level":2,"title":"5、环境隔离","slug":"_5、环境隔离","link":"#_5、环境隔离","children":[{"level":3,"title":"5.1、创建 namespace","slug":"_5-1、创建-namespace","link":"#_5-1、创建-namespace","children":[]},{"level":3,"title":"5.2、给微服务配置 namespace","slug":"_5-2、给微服务配置-namespace","link":"#_5-2、给微服务配置-namespace","children":[]}]},{"level":2,"title":"6、Nacos与Eureka的区别","slug":"_6、nacos与eureka的区别","link":"#_6、nacos与eureka的区别","children":[]}]}],"git":{},"readingTime":{"minutes":13.23,"words":3969},"filePathRelative":"Java后端/Microservice/SpringCloud 01（二）.md","localizedDate":"2023年9月20日","excerpt":"<p>Ribbon 负载均衡、Nacos 注册中心</p>\\n","autoDesc":true}`);export{o as comp,c as data};
