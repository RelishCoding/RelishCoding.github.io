import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,d as n,b as l,o as t}from"./app-D2bV2LwX.js";const r={};function p(g,i){return t(),a("div",null,[i[0]||(i[0]=e("p",null,"认识微服务、服务拆分与远程调用、Eureka 注册中心",-1)),n(" more "),i[1]||(i[1]=l(`<h1 id="一、认识微服务" tabindex="-1"><a class="header-anchor" href="#一、认识微服务"><span>一、认识微服务</span></a></h1><p>随着互联网行业的发展，对服务的要求也越来越高，服务架构也从单体架构逐渐演变为现在流行的微服务架构。这些架构之间有怎样的差别呢？</p><h2 id="_1、单体架构" tabindex="-1"><a class="header-anchor" href="#_1、单体架构"><span>1、单体架构</span></a></h2><p><strong>单体架构</strong>：将业务的所有功能集中在一个项目中开发，打成一个包部署。</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image1.png" alt="image1" tabindex="0" loading="lazy"><figcaption>image1</figcaption></figure><p>单体架构的优缺点如下：</p><p><strong>优点</strong>：</p><ul><li>架构简单</li><li>部署成本低</li></ul><p><strong>缺点</strong>：</p><ul><li>耦合度高（维护困难、升级困难）</li></ul><h2 id="_2、分布式架构" tabindex="-1"><a class="header-anchor" href="#_2、分布式架构"><span>2、分布式架构</span></a></h2><p><strong>分布式架构</strong>：根据业务功能对系统做拆分，每个业务功能模块作为独立项目开发，称为一个服务。</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image2.png" alt="image2" tabindex="0" loading="lazy"><figcaption>image2</figcaption></figure><p>分布式架构的优缺点：</p><p><strong>优点</strong>：</p><ul><li>降低服务耦合</li><li>有利于服务升级和拓展</li></ul><p><strong>缺点</strong>：</p><ul><li>服务调用关系错综复杂</li></ul><p>分布式架构虽然降低了服务耦合，但是服务拆分时也有很多问题需要思考：</p><ul><li>服务拆分的粒度如何界定？</li><li>服务之间如何调用？</li><li>服务的调用关系如何管理？</li></ul><p>人们需要制定一套行之有效的标准来约束分布式架构。</p><h2 id="_3、微服务" tabindex="-1"><a class="header-anchor" href="#_3、微服务"><span>3、微服务</span></a></h2><p>微服务的架构特征：</p><ul><li>单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责</li><li>自治：团队独立、技术独立、数据独立，独立部署和交付</li><li>面向服务：服务提供统一标准的接口，与语言和技术无关</li><li>隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题</li></ul><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image3.png" alt="image3" tabindex="0" loading="lazy"><figcaption>image3</figcaption></figure><p>微服务的上述特性其实是在给分布式架构制定一个标准，进一步降低服务之间的耦合度，提供服务的独立性和灵活性。做到高内聚，低耦合。</p><p>因此，可以认为<strong>微服务</strong>是一种经过良好架构设计的<strong>分布式架构方案</strong> 。</p><p>但方案该怎么落地？选用什么样的技术栈？全球的互联网公司都在积极尝试自己的微服务落地方案。</p><p>其中在 Java 领域最引人注目的就是 SpringCloud 提供的方案了。</p><h2 id="_4、微服务技术对比" tabindex="-1"><a class="header-anchor" href="#_4、微服务技术对比"><span>4、微服务技术对比</span></a></h2><p>微服务这种方案需要技术框架来落地，全球的互联网公司都在积极尝试自己的微服务落地技术。在国内最知名的就是 SpringCloud 和阿里巴巴的 Dubbo。</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image4.png" alt="image4" tabindex="0" loading="lazy"><figcaption>image4</figcaption></figure><p>微服务技术对比：</p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">Dubbo</th><th style="text-align:center;">SpringCloud</th><th style="text-align:center;">SpringCloudAlibaba</th></tr></thead><tbody><tr><td style="text-align:center;">注册中心</td><td style="text-align:center;">zookeeper、Redis</td><td style="text-align:center;">Eureka、Consul</td><td style="text-align:center;">Nacos、Eureka</td></tr><tr><td style="text-align:center;">服务远程调用</td><td style="text-align:center;">Dubbo 协议</td><td style="text-align:center;">Feign（http 协议）</td><td style="text-align:center;">Dubbo、Fegin</td></tr><tr><td style="text-align:center;">配置中心</td><td style="text-align:center;">无</td><td style="text-align:center;">SpringCloudConfig</td><td style="text-align:center;">SpringCloudConfig、Nacos</td></tr><tr><td style="text-align:center;">服务网关</td><td style="text-align:center;">无</td><td style="text-align:center;">SpringCloudGateway、Zuul</td><td style="text-align:center;">SpringCloudGateway、Zuul</td></tr><tr><td style="text-align:center;">服务监视和保护</td><td style="text-align:center;">dubbo-admin，功能弱</td><td style="text-align:center;">Hystrix</td><td style="text-align:center;">Sentinel</td></tr></tbody></table><p>企业需求：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image5.png" alt="image5" tabindex="0" loading="lazy"><figcaption>image5</figcaption></figure><h2 id="_5、springcloud" tabindex="-1"><a class="header-anchor" href="#_5、springcloud"><span>5、SpringCloud</span></a></h2><p>SpringCloud 是目前国内使用最广泛的微服务框架。官网地址：<a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener noreferrer">https://spring.io/projects/spring-cloud</a></p><p>SpringCloud 集成了各种微服务功能组件，并基于 SpringBoot 实现了这些组件的自动装配，从而提供了良好的开箱即用体验。</p><p>其中常见的组件包括：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image6.png" alt="image6" tabindex="0" loading="lazy"><figcaption>image6</figcaption></figure><p>另外，SpringCloud 底层是依赖于 SpringBoot 的，并且有版本的兼容关系，如下：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image7.png" alt="image7" tabindex="0" loading="lazy"><figcaption>image7</figcaption></figure><p>我们学习的版本是 Hoxton.SR10，因此对应的 SpringBoot 版本是 2.3.x 版本。</p><h2 id="_6、总结" tabindex="-1"><a class="header-anchor" href="#_6、总结"><span>6、总结</span></a></h2><ul><li><p>单体架构：简单方便，高度耦合，扩展性差，适合小型项目。例如：学生管理系统</p></li><li><p>分布式架构：松耦合，扩展性好，但架构复杂，难度大。适合大型互联网项目，例如：京东、淘宝</p></li><li><p>微服务：一种良好的分布式架构方案</p><p>①优点：拆分粒度更小、服务更独立、耦合度更低</p><p>②缺点：架构非常复杂，运维、监控、部署难度提高</p></li><li><p>SpringCloud 是微服务架构的一站式解决方案，集成了各种优秀微服务功能组件</p></li></ul><h1 id="二、服务拆分和远程调用" tabindex="-1"><a class="header-anchor" href="#二、服务拆分和远程调用"><span>二、服务拆分和远程调用</span></a></h1><p>任何分布式架构都离不开服务的拆分，微服务也是一样。</p><h2 id="_1、服务拆分原则" tabindex="-1"><a class="header-anchor" href="#_1、服务拆分原则"><span>1、服务拆分原则</span></a></h2><p>这里我总结了微服务拆分时的几个原则：</p><ul><li>不同微服务，不要重复开发相同业务</li><li>微服务数据独立，不要访问其它微服务的数据库</li><li>微服务可以将自己的业务暴露为接口，供其它微服务调用</li></ul><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image8.png" alt="image8" tabindex="0" loading="lazy"><figcaption>image8</figcaption></figure><h2 id="_2、服务拆分示例" tabindex="-1"><a class="header-anchor" href="#_2、服务拆分示例"><span>2、服务拆分示例</span></a></h2><p>以课前资料中的微服务 cloud-demo 为例，其结构如下：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image9.png" alt="image9" tabindex="0" loading="lazy"><figcaption>image9</figcaption></figure><p>cloud-demo：父工程，管理依赖</p><ul><li>order-service：订单微服务，负责订单相关业务</li><li>user-service：用户微服务，负责用户相关业务</li></ul><p>要求：</p><ul><li>订单微服务和用户微服务都必须有各自的数据库，相互独立</li><li>订单服务和用户服务都对外暴露 Restful 的接口</li><li>订单服务如果需要查询用户信息，只能调用用户服务的 Restful 接口，不能查询用户数据库</li></ul><h3 id="_2-1、导入sql语句" tabindex="-1"><a class="header-anchor" href="#_2-1、导入sql语句"><span>2.1、导入Sql语句</span></a></h3><p>首先，将课前资料提供的 <code>cloud-order.sql</code> 和 <code>cloud-user.sql</code> 导入到 mysql 中。</p><p>cloud-user 表中初始数据如下：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image10.png" alt="image10" tabindex="0" loading="lazy"><figcaption>image10</figcaption></figure><p>cloud-order 表中初始数据如下：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image11.png" alt="image11" tabindex="0" loading="lazy"><figcaption>image11</figcaption></figure><p>cloud-order 表中持有 cloud-user 表中的 id 字段。</p><h3 id="_2-2、导入-demo-工程" tabindex="-1"><a class="header-anchor" href="#_2-2、导入-demo-工程"><span>2.2、导入 demo 工程</span></a></h3><p>用 IDEA 导入课前资料提供的项目工程 cloud-demo：</p><p>项目结构如下：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image12.png" alt="image12" tabindex="0" loading="lazy"><figcaption>image12</figcaption></figure><p>导入后，会在 IDEA 右下角出现弹窗：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image13.png" alt="image13" tabindex="0" loading="lazy"><figcaption>image13</figcaption></figure><p>点击弹窗，然后按下图选择：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image14.png" alt="image14" tabindex="0" loading="lazy"><figcaption>image14</figcaption></figure><p>会出现这样的菜单：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image15.png" alt="image15" tabindex="0" loading="lazy"><figcaption>image15</figcaption></figure><p>配置下项目使用的 JDK：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image16.png" alt="image16" tabindex="0" loading="lazy"><figcaption>image16</figcaption></figure><h2 id="_3、实现远程调用案例" tabindex="-1"><a class="header-anchor" href="#_3、实现远程调用案例"><span>3、实现远程调用案例</span></a></h2><p>在 order-service 服务中，有一个根据 id 查询订单的接口：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image17.png" alt="image17" tabindex="0" loading="lazy"><figcaption>image17</figcaption></figure><p>根据 id 查询订单，返回值是 Order 对象，如图：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image18.png" alt="image18" tabindex="0" loading="lazy"><figcaption>image18</figcaption></figure><p>其中的 user 为 null</p><p>在 user-service 中有一个根据 id 查询用户的接口：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image19.png" alt="image19" tabindex="0" loading="lazy"><figcaption>image19</figcaption></figure><p>查询的结果如图：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image20.png" alt="image20" tabindex="0" loading="lazy"><figcaption>image20</figcaption></figure><h3 id="_3-1、案例需求" tabindex="-1"><a class="header-anchor" href="#_3-1、案例需求"><span>3.1、案例需求</span></a></h3><p>修改 order-service 中的根据 id 查询订单业务，要求在查询订单的同时，根据订单中包含的 userId 查询出用户信息，一起返回。</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image21.png" alt="image21" tabindex="0" loading="lazy"><figcaption>image21</figcaption></figure><p>因此，我们需要在 order-service 中向 user-service 发起一个 http 的请求，调用 http://localhost:8081/user/{userId}这个接口。</p><p>大概的步骤是这样的：</p><ul><li>注册一个 RestTemplate 的实例到 Spring 容器</li><li>修改 order-service 服务中的 OrderService 类中的 queryOrderById 方法，根据 Order 对象中的 userId 查询 User</li><li>将查询的 User 填充到 Order 对象，一起返回</li></ul><h3 id="_3-2、注册resttemplate" tabindex="-1"><a class="header-anchor" href="#_3-2、注册resttemplate"><span>3.2、注册RestTemplate</span></a></h3><p>首先，我们在 order-service 服务中的 OrderApplication 启动类中，注册 RestTemplate 实例：</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="java" data-title="java" style="--vp-collapsed-lines:15;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> cn.itcast.order</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.mybatis.spring.annotation.MapperScan</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.boot.SpringApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.boot.autoconfigure.SpringBootApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.context.annotation.Bean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.web.client.RestTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">MapperScan</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;cn.itcast.order.mapper&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> OrderApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        SpringApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">OrderApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, args);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RestTemplate</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> restTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RestTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_3-3、实现远程调用" tabindex="-1"><a class="header-anchor" href="#_3-3、实现远程调用"><span>3.3、实现远程调用</span></a></h3><p>修改 order-service 服务中的 cn.itcast.order.service 包下的 OrderService 类中的 queryOrderById 方法：</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="java" data-title="java" style="--vp-collapsed-lines:15;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Service</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> OrderService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> OrderMapper</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> orderMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RestTemplate</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> restTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Order</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> queryOrderById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Long</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> orderId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 1.查询订单</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Order</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> order</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> orderMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">findById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(orderId);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 2.利用RestTemplate发起http请求，查询用户</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 2.1.url路径</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> url</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;http://localhost:8081/user/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> order</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getUserId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 2.2.发送http请求，实现远程调用</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        User</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> restTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getForObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(url, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 3.封装user到Order</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        order</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setUser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(user);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 4.返回</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> order;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image22.png" alt="image22" tabindex="0" loading="lazy"><figcaption>image22</figcaption></figure><h2 id="_4、提供者与消费者" tabindex="-1"><a class="header-anchor" href="#_4、提供者与消费者"><span>4、提供者与消费者</span></a></h2><p>在服务调用关系中，会有两个不同的角色：</p><p><strong>服务提供者</strong>：一次业务中，被其它微服务调用的服务。（提供接口给其它微服务）</p><p><strong>服务消费者</strong>：一次业务中，调用其它微服务的服务。（调用其它微服务提供的接口）</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image23.png" alt="image23" tabindex="0" loading="lazy"><figcaption>image23</figcaption></figure><p>但是，服务提供者与服务消费者的角色并不是绝对的，而是相对于业务而言。</p><p>如果服务 A 调用了服务 B，而服务 B 又调用了服务 C，服务 B 的角色是什么？</p><ul><li>对于 A 调用 B 的业务而言：A 是服务消费者，B 是服务提供者</li><li>对于 B 调用 C 的业务而言：B 是服务消费者，C 是服务提供者</li></ul><p>因此，服务 B 既可以是服务提供者，也可以是服务消费者。</p><h1 id="三、eureka注册中心" tabindex="-1"><a class="header-anchor" href="#三、eureka注册中心"><span>三、Eureka注册中心</span></a></h1><p>假如我们的服务提供者 user-service 部署了多个实例，如图：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image24.png" alt="image24" tabindex="0" loading="lazy"><figcaption>image24</figcaption></figure><p>大家思考几个问题：</p><ul><li>order-service 在发起远程调用的时候，该如何得知 user-service 实例的 IP 地址和端口？</li><li>有多个 user-service 实例地址，order-service 调用时该如何选择？</li><li>order-service 如何得知某个 user-service 实例是否依然健康，是不是已经宕机？</li></ul><h2 id="_1、eureka的结构和作用" tabindex="-1"><a class="header-anchor" href="#_1、eureka的结构和作用"><span>1、Eureka的结构和作用</span></a></h2><p>这些问题都需要利用 SpringCloud 中的注册中心来解决，其中最广为人知的注册中心就是 Eureka，其结构如下：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image25.png" alt="image25" tabindex="0" loading="lazy"><figcaption>image25</figcaption></figure><p>回答之前的各个问题。</p><p>问题 1：order-service 如何得知 user-service 实例地址？</p><p>获取地址信息的流程如下：</p><ul><li>user-service 服务实例启动后，将自己的信息注册到 eureka-server（Eureka 服务端）。这个叫服务注册</li><li>eureka-server 保存服务名称到服务实例地址列表的映射关系</li><li>order-service 根据服务名称，拉取实例地址列表。这个叫服务发现或服务拉取</li></ul><p>问题 2：order-service 如何从多个 user-service 实例中选择具体的实例？</p><ul><li>order-service 从实例列表中利用负载均衡算法选中一个实例地址</li><li>向该实例地址发起远程调用</li></ul><p>问题 3：order-service 如何得知某个 user-service 实例是否依然健康，是不是已经宕机？</p><ul><li>user-service 会每隔一段时间（默认 30 秒）向 eureka-server 发起请求，报告自己状态，称为心跳</li><li>当超过一定时间没有发送心跳时，eureka-server 会认为微服务实例故障，将该实例从服务列表中剔除</li><li>order-service 拉取服务时，就能将故障实例排除了</li></ul><blockquote><p>注意：一个微服务，既可以是服务提供者，又可以是服务消费者，因此 eureka 将服务注册、服务发现等功能统一封装到了 eureka-client 端</p></blockquote><p>因此，接下来我们动手实践的步骤包括：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image26.png" alt="image26" tabindex="0" loading="lazy"><figcaption>image26</figcaption></figure><blockquote><p>总结：在 Eureka 架构中，微服务角色有两类：</p><ul><li>EurekaServer：服务端，注册中心 <ul><li>记录服务信息</li><li>心跳监控</li></ul></li><li>EurekaClient：客户端 <ul><li>Provider：服务提供者，例如案例中的 user-service <ul><li>注册自己的信息到 EurekaServer</li><li>每隔 30 秒向 EurekaServer 发送心跳</li></ul></li><li>consumer：服务消费者，例如案例中的 order-service <ul><li>根据服务名称从 EurekaServer 拉取服务列表</li><li>基于服务列表做负载均衡，选中一个微服务后发起远程调用</li></ul></li></ul></li></ul></blockquote><h2 id="_2、搭建eureka-server" tabindex="-1"><a class="header-anchor" href="#_2、搭建eureka-server"><span>2、搭建eureka-server</span></a></h2><p>首先注册中心服务端：eureka-server，这必须是一个独立的微服务</p><h3 id="_2-1、创建-eureka-server-服务" tabindex="-1"><a class="header-anchor" href="#_2-1、创建-eureka-server-服务"><span>2.1、创建 eureka-server 服务</span></a></h3><p>在 cloud-demo 父工程下，创建一个子模块：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image27.png" alt="image27" tabindex="0" loading="lazy"><figcaption>image27</figcaption></figure><p>填写模块信息：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image28.png" alt="image28" tabindex="0" loading="lazy"><figcaption>image28</figcaption></figure><p>然后填写服务信息：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image29.png" alt="image29" tabindex="0" loading="lazy"><figcaption>image29</figcaption></figure><h3 id="_2-2、引入-eureka-依赖" tabindex="-1"><a class="header-anchor" href="#_2-2、引入-eureka-依赖"><span>2.2、引入 eureka 依赖</span></a></h3><p>引入 SpringCloud 为 eureka 提供的 starter 依赖：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.cloud&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-cloud-starter-netflix-eureka-server&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3、编写启动类" tabindex="-1"><a class="header-anchor" href="#_2-3、编写启动类"><span>2.3、编写启动类</span></a></h3><p>给 eureka-server 服务编写一个启动类，一定要添加一个 @EnableEurekaServer 注解，开启 eureka 的注册中心功能：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> cn.itcast.eureka</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.boot.SpringApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.boot.autoconfigure.SpringBootApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">EnableEurekaServer</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> EurekaApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        SpringApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">EurekaApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, args);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4、编写配置文件" tabindex="-1"><a class="header-anchor" href="#_2-4、编写配置文件"><span>2.4、编写配置文件</span></a></h3><p>编写一个 application.yml 文件，内容如下：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10086</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">eureka-server</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">eureka</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    service-url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      defaultZone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http://127.0.0.1:10086/eureka</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5、启动服务" tabindex="-1"><a class="header-anchor" href="#_2-5、启动服务"><span>2.5、启动服务</span></a></h3><p>启动微服务，然后在浏览器访问：http://127.0.0.1:10086</p><p>看到下面结果应该是成功了：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image30.png" alt="image30" tabindex="0" loading="lazy"><figcaption>image30</figcaption></figure><h2 id="_3、服务注册" tabindex="-1"><a class="header-anchor" href="#_3、服务注册"><span>3、服务注册</span></a></h2><p>下面，我们将 user-service 注册到 eureka-server 中去。</p><h3 id="_3-1、引入依赖" tabindex="-1"><a class="header-anchor" href="#_3-1、引入依赖"><span>3.1、引入依赖</span></a></h3><p>在 user-service 的 pom 文件中，引入下面的 eureka-client 依赖：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.cloud&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-cloud-starter-netflix-eureka-client&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2、配置文件" tabindex="-1"><a class="header-anchor" href="#_3-2、配置文件"><span>3.2、配置文件</span></a></h3><p>在 user-service 中，修改 application.yml 文件，添加服务名称、eureka 地址：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">userservice</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">eureka</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    service-url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      defaultZone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http://127.0.0.1:10086/eureka</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3、启动多个user-service实例" tabindex="-1"><a class="header-anchor" href="#_3-3、启动多个user-service实例"><span>3.3、启动多个user-service实例</span></a></h3><p>为了演示一个服务有多个实例的场景，我们添加一个 SpringBoot 的启动配置，再启动一个 user-service。</p><p>首先，复制原来的 user-service 启动配置：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image31.png" alt="image31" tabindex="0" loading="lazy"><figcaption>image31</figcaption></figure><p>然后，在弹出的窗口中，填写信息（为了避免端口冲突，需要修改端口设置）：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image32.png" alt="image32" tabindex="0" loading="lazy"><figcaption>image32</figcaption></figure><p>现在，SpringBoot 窗口会出现两个 user-service 启动配置：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image33.png" alt="image33" tabindex="0" loading="lazy"><figcaption>image33</figcaption></figure><p>不过，第一个是 8081 端口，第二个是 8082 端口。</p><p>启动两个 user-service 实例：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image34.png" alt="image34" tabindex="0" loading="lazy"><figcaption>image34</figcaption></figure><p>查看 eureka-server 管理页面：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image35.png" alt="image35" tabindex="0" loading="lazy"><figcaption>image35</figcaption></figure><h2 id="_4、服务发现" tabindex="-1"><a class="header-anchor" href="#_4、服务发现"><span>4、服务发现</span></a></h2><p>下面，我们将 order-service 的逻辑修改：向 eureka-server 拉取 user-service 的信息，实现服务发现。</p><h3 id="_4-1、引入依赖" tabindex="-1"><a class="header-anchor" href="#_4-1、引入依赖"><span>4.1、引入依赖</span></a></h3><p>之前说过，服务发现、服务注册统一都封装在 eureka-client 依赖，因此这一步与服务注册时一致。</p><p>在 order-service 的 pom 文件中，引入下面的 eureka-client 依赖：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.cloud&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-cloud-starter-netflix-eureka-client&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2、配置文件" tabindex="-1"><a class="header-anchor" href="#_4-2、配置文件"><span>4.2、配置文件</span></a></h3><p>服务发现也需要知道 eureka 地址，因此第二步与服务注册一致，都是配置 eureka 信息：</p><p>在 order-service 中，修改 application.yml 文件，添加服务名称、eureka 地址：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">orderservice</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">eureka</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    service-url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      defaultZone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">http://127.0.0.1:10086/eureka</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3、服务拉取和负载均衡" tabindex="-1"><a class="header-anchor" href="#_4-3、服务拉取和负载均衡"><span>4.3、服务拉取和负载均衡</span></a></h3><p>最后，我们要去 eureka-server 中拉取 user-service 服务的实例列表，并且实现负载均衡。</p><p>不过这些动作不用我们去做，只需要添加一些注解即可。</p><p>在 order-service 的 OrderApplication 中，给 RestTemplate 这个 Bean 添加一个 @LoadBalanced 注解：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image36.png" alt="image36" tabindex="0" loading="lazy"><figcaption>image36</figcaption></figure><p>修改 order-service 服务中的 cn.itcast.order.service 包下的 OrderService 类中的 queryOrderById 方法。修改访问的 url 路径，用服务名代替 IP、端口：</p><figure><img src="http://img.relishcoding.top/springcloud-learning/SpringCloud01/image37.png" alt="image37" tabindex="0" loading="lazy"><figcaption>image37</figcaption></figure><p>spring 会自动帮助我们从 eureka-server 端，根据 userservice 这个服务名称，获取实例列表，而后完成负载均衡。</p><h2 id="_5、总结" tabindex="-1"><a class="header-anchor" href="#_5、总结"><span>5、总结</span></a></h2><ol><li><p>搭建 EurekaServer</p><ul><li>引入 eureka-server 依赖</li><li>添加 @EnableEurekaServer 注解</li><li>在 application.yml 中配置 eureka 地址</li></ul></li><li><p>服务注册</p><ul><li>引入 eureka-client 依赖</li><li>在 application.yml 中配置 eureka 地址</li></ul></li><li><p>服务发现</p><ul><li>引入 eureka-client 依赖</li><li>在 application.yml 中配置 eureka 地址</li><li>给 RestTemplate 添加 @LoadBalanced 注解</li><li>用服务提供者的服务名称远程调用</li></ul></li></ol><blockquote><p>参考视频：<a href="https://www.bilibili.com/video/BV1LQ4y127n4/?p=17&amp;share_source=copy_web" target="_blank" rel="noopener noreferrer">SpringCloud+RabbitMQ+Docker+Redis+搜索+分布式，系统详解springcloud微服务技术栈课程|黑马程序员Java微服务</a></p></blockquote>`,194))])}const k=s(r,[["render",p],["__file","SpringCloud 01（一）.html.vue"]]),c=JSON.parse(`{"path":"/Java%E5%90%8E%E7%AB%AF/Microservice/SpringCloud%2001%EF%BC%88%E4%B8%80%EF%BC%89.html","title":"SpringCloud 01（一）","lang":"zh-CN","frontmatter":{"title":"SpringCloud 01（一）","date":"2023-09-19T00:00:00.000Z","category":"Microservice","tag":["microservice"],"description":"认识微服务、服务拆分与远程调用、Eureka 注册中心","head":[["meta",{"property":"og:url","content":"https://relishcoding.github.io/Java%E5%90%8E%E7%AB%AF/Microservice/SpringCloud%2001%EF%BC%88%E4%B8%80%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"RelishCoding's Blog"}],["meta",{"property":"og:title","content":"SpringCloud 01（一）"}],["meta",{"property":"og:description","content":"认识微服务、服务拆分与远程调用、Eureka 注册中心"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"microservice"}],["meta",{"property":"article:published_time","content":"2023-09-19T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringCloud 01（一）\\",\\"image\\":[\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image1.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image2.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image3.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image4.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image5.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image6.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image7.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image8.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image9.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image10.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image11.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image12.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image13.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image14.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image15.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image16.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image17.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image18.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image19.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image20.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image21.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image22.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image23.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image24.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image25.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image26.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image27.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image28.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image29.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image30.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image31.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image32.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image33.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image34.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image35.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image36.png\\",\\"http://img.relishcoding.top/springcloud-learning/SpringCloud01/image37.png\\"],\\"datePublished\\":\\"2023-09-19T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"RelishCoding\\",\\"url\\":\\"https://github.com/RelishCoding\\"}]}"]]},"headers":[{"level":1,"title":"一、认识微服务","slug":"一、认识微服务","link":"#一、认识微服务","children":[{"level":2,"title":"1、单体架构","slug":"_1、单体架构","link":"#_1、单体架构","children":[]},{"level":2,"title":"2、分布式架构","slug":"_2、分布式架构","link":"#_2、分布式架构","children":[]},{"level":2,"title":"3、微服务","slug":"_3、微服务","link":"#_3、微服务","children":[]},{"level":2,"title":"4、微服务技术对比","slug":"_4、微服务技术对比","link":"#_4、微服务技术对比","children":[]},{"level":2,"title":"5、SpringCloud","slug":"_5、springcloud","link":"#_5、springcloud","children":[]},{"level":2,"title":"6、总结","slug":"_6、总结","link":"#_6、总结","children":[]}]},{"level":1,"title":"二、服务拆分和远程调用","slug":"二、服务拆分和远程调用","link":"#二、服务拆分和远程调用","children":[{"level":2,"title":"1、服务拆分原则","slug":"_1、服务拆分原则","link":"#_1、服务拆分原则","children":[]},{"level":2,"title":"2、服务拆分示例","slug":"_2、服务拆分示例","link":"#_2、服务拆分示例","children":[{"level":3,"title":"2.1、导入Sql语句","slug":"_2-1、导入sql语句","link":"#_2-1、导入sql语句","children":[]},{"level":3,"title":"2.2、导入 demo 工程","slug":"_2-2、导入-demo-工程","link":"#_2-2、导入-demo-工程","children":[]}]},{"level":2,"title":"3、实现远程调用案例","slug":"_3、实现远程调用案例","link":"#_3、实现远程调用案例","children":[{"level":3,"title":"3.1、案例需求","slug":"_3-1、案例需求","link":"#_3-1、案例需求","children":[]},{"level":3,"title":"3.2、注册RestTemplate","slug":"_3-2、注册resttemplate","link":"#_3-2、注册resttemplate","children":[]},{"level":3,"title":"3.3、实现远程调用","slug":"_3-3、实现远程调用","link":"#_3-3、实现远程调用","children":[]}]},{"level":2,"title":"4、提供者与消费者","slug":"_4、提供者与消费者","link":"#_4、提供者与消费者","children":[]}]},{"level":1,"title":"三、Eureka注册中心","slug":"三、eureka注册中心","link":"#三、eureka注册中心","children":[{"level":2,"title":"1、Eureka的结构和作用","slug":"_1、eureka的结构和作用","link":"#_1、eureka的结构和作用","children":[]},{"level":2,"title":"2、搭建eureka-server","slug":"_2、搭建eureka-server","link":"#_2、搭建eureka-server","children":[{"level":3,"title":"2.1、创建 eureka-server 服务","slug":"_2-1、创建-eureka-server-服务","link":"#_2-1、创建-eureka-server-服务","children":[]},{"level":3,"title":"2.2、引入 eureka 依赖","slug":"_2-2、引入-eureka-依赖","link":"#_2-2、引入-eureka-依赖","children":[]},{"level":3,"title":"2.3、编写启动类","slug":"_2-3、编写启动类","link":"#_2-3、编写启动类","children":[]},{"level":3,"title":"2.4、编写配置文件","slug":"_2-4、编写配置文件","link":"#_2-4、编写配置文件","children":[]},{"level":3,"title":"2.5、启动服务","slug":"_2-5、启动服务","link":"#_2-5、启动服务","children":[]}]},{"level":2,"title":"3、服务注册","slug":"_3、服务注册","link":"#_3、服务注册","children":[{"level":3,"title":"3.1、引入依赖","slug":"_3-1、引入依赖","link":"#_3-1、引入依赖","children":[]},{"level":3,"title":"3.2、配置文件","slug":"_3-2、配置文件","link":"#_3-2、配置文件","children":[]},{"level":3,"title":"3.3、启动多个user-service实例","slug":"_3-3、启动多个user-service实例","link":"#_3-3、启动多个user-service实例","children":[]}]},{"level":2,"title":"4、服务发现","slug":"_4、服务发现","link":"#_4、服务发现","children":[{"level":3,"title":"4.1、引入依赖","slug":"_4-1、引入依赖","link":"#_4-1、引入依赖","children":[]},{"level":3,"title":"4.2、配置文件","slug":"_4-2、配置文件","link":"#_4-2、配置文件","children":[]},{"level":3,"title":"4.3、服务拉取和负载均衡","slug":"_4-3、服务拉取和负载均衡","link":"#_4-3、服务拉取和负载均衡","children":[]}]},{"level":2,"title":"5、总结","slug":"_5、总结","link":"#_5、总结","children":[]}]}],"git":{},"readingTime":{"minutes":12.26,"words":3678},"filePathRelative":"Java后端/Microservice/SpringCloud 01（一）.md","localizedDate":"2023年9月19日","excerpt":"<p>认识微服务、服务拆分与远程调用、Eureka 注册中心</p>\\n","autoDesc":true}`);export{k as comp,c as data};
